# RestServiceCaller Configuration
service.base.url=https://example.com/api

# Timeout Configuration (in milliseconds)
service.connect.timeout=5000
service.read.timeout=5000

# Connection Pool Configuration
service.max.total.connections=200
service.max.per.route=20


===

package com.example.orchestrationservice.service;

import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.apache.http.impl.client.HttpRequestRetryHandler;
import org.apache.http.client.HttpClient;
import org.apache.http.impl.conn.SystemDefaultRoutePlanner;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Map;

@Service
public class RestServiceCaller {

    private static final Logger logger = LoggerFactory.getLogger(RestServiceCaller.class);

    // Inject configuration values from application.properties
    @Value("${service.base.url}")
    private String serviceBaseUrl;

    @Value("${service.connect.timeout}")
    private int connectTimeout;

    @Value("${service.read.timeout}")
    private int readTimeout;

    @Value("${service.max.total.connections}")
    private int maxTotalConnections;

    @Value("${service.max.per.route}")
    private int maxConnectionsPerRoute;

    private final RestTemplate restTemplate;

    // Constructor with RestTemplate injection
    public RestServiceCaller(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    /**
     * Generic GET request to another service.
     * @param uri URI to call the service.
     * @param params Query parameters.
     * @return Response body as a String.
     */
    public String callGetService(String uri, Map<String, String> params) {
        String url = UriComponentsBuilder.fromHttpUrl(serviceBaseUrl + uri)
                .queryParams(params)
                .build().toUriString();

        logger.info("Calling GET service at URL: {}", url);

        try {
            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, null, String.class);
            return response.getBody();
        } catch (HttpClientErrorException | HttpServerErrorException ex) {
            logger.error("Error calling GET service: {}. Status Code: {}. Response Body: {}",
                uri, ex.getStatusCode(), ex.getResponseBodyAsString());
            throw ex; // Rethrow or handle as needed
        } catch (Exception ex) {
            logger.error("Unexpected error while calling GET service: {}", uri, ex);
            throw new RuntimeException("Error while calling GET service", ex);
        }
    }

    /**
     * Generic POST request to another service.
     * @param uri URI to call the service.
     * @param requestBody Request payload.
     * @return Response body as a String.
     */
    public String callPostService(String uri, Object requestBody) {
        String url = serviceBaseUrl + uri;
        logger.info("Calling POST service at URL: {}", url);

        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            HttpEntity<Object> entity = new HttpEntity<>(requestBody, headers);
            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, entity, String.class);
            return response.getBody();
        } catch (HttpClientErrorException | HttpServerErrorException ex) {
            logger.error("Error calling POST service: {}. Status Code: {}. Response Body: {}",
                uri, ex.getStatusCode(), ex.getResponseBodyAsString());
            throw ex; // Rethrow or handle as needed
        } catch (Exception ex) {
            logger.error("Unexpected error while calling POST service: {}", uri, ex);
            throw new RuntimeException("Error while calling POST service", ex);
        }
    }

    /**
     * Configures RestTemplate with timeouts and connection pool settings.
     * @return Configured RestTemplate.
     */
    private RestTemplate configureRestTemplate() {
        // Pooling connection manager to handle HTTP connections
        PoolingHttpClientConnectionManager poolingConnManager = new PoolingHttpClientConnectionManager();
        poolingConnManager.setMaxTotal(maxTotalConnections);  // Max total connections
        poolingConnManager.setDefaultMaxPerRoute(maxConnectionsPerRoute); // Max connections per route

        // Configure HTTP client with connection pool and timeouts
        HttpClient httpClient = HttpClients.custom()
                .setConnectionManager(poolingConnManager)
                .setDefaultRequestConfig(RequestConfig.custom()
                        .setConnectTimeout(connectTimeout)
                        .setSocketTimeout(readTimeout)
                        .build())
                .setRetryHandler(new HttpRequestRetryHandler() {
                    @Override
                    public boolean retryRequest(IOException exception, int executionCount, HttpContext context) {
                        return executionCount < 3;  // Retry for up to 3 times
                    }
                })
                .build();

        return new RestTemplate(new HttpComponentsClientHttpRequestFactory(httpClient));
    }
}

====

package com.example.orchestrationservice.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;

@Configuration
public class AppConfig {

    @Bean
    public RestTemplate restTemplate() {
        return new RestTemplate(); // Can be replaced with a more customized RestTemplate if necessary
    }
}


===

